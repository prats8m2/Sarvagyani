[{"/Users/vvdn/Downloads/prateek/sarvagyani/src/App.js":"1","/Users/vvdn/Downloads/prateek/sarvagyani/src/reportWebVitals.js":"2","/Users/vvdn/Downloads/prateek/sarvagyani/src/index.js":"3"},{"size":7941,"mtime":1610464382542,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1610368198295,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1610368198294,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1p0tnhv",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"/Users/vvdn/Downloads/prateek/sarvagyani/src/App.js",["16","17","18"],"import './App.scss';\nimport React from 'react';\nimport Modal from 'react-modal';\n\nclass App extends React.Component {\n\n  componentDidMount(){\n    console.info(\"Don't try to debug me, You will get nothing\");\n  }\n\n  //INTIALIZE ALL THE STATE\n  state = {\n    petition: \"\",//FOR PETITION\n    ansMode: false,//TOGGLE TO CHECK ANSWER MODE IS ON OR OFF\n    count: 0,//COUNT TO CHECK THE NUMBER OF INPUT ADDED BY THE USER\n    answer: \"\",//ANSWER OF THE QUESTION\n    displayAnswer: false,// TOGGLE TO DISPLAY ANSWER\n    loader: false,// TOGGLE TO DISPLAY LOADER\n    lastAnswer: null,// VARIBALE TO SAVE LAST DISPLAYED ANSWER (RANSDON ONE)\n    PETITION :['S', 'a', 'r', 'v', 'a', 'g', 'y', 'a', 'n', 'i', ' ', 'p', 'l', 'e', 'a', 's', 'e', ' ', 't', 'e', 'l', 'l', ''],\n    modalIsOpen: false\n  };\n\n\n  //FUNCTION TO HANDLE THE INPUT OF PETITION\n  handleChange(event) {\n    const { ansMode, count, answer, PETITION } = this.state;\n    console.log({answer,ansMode,count});\n    if (event.nativeEvent.data != null && event.target.value) {//CHECK IF SOME KEY PRESSED OR NOT AND IF PETITION IS EMPTY OR NOT\n      if (count < PETITION.length)// CHECK IF PETION LENGTH IS NOT MORE THEN ORIGINAL PETITION\n        if (event.nativeEvent.data === \".\") {//CHECK IF . IS PRESSED\n          this.setState({//TOGGLE ANSWER MODE\n            ansMode: !ansMode\n          }, () => {\n            this.setDefaultPetition();//SET DEFAULT PETITION\n          })\n        }\n        else {\n          if (ansMode) {//IF ANSWER MODE IS ON\n            this.setDefaultPetition();//SET DEFAULT PETITION\n            this.setState({//ADD ANSWER \n              answer: answer + event.nativeEvent.data\n            })\n          }\n          else {//SET NORMAL KEY BEHAVIOUR\n            this.setState({ petition: event.target.value, count: count + 1, showAnswer: false});\n          }\n        }\n    }\n    else {\n      this.clearData();//CLEAR FULL DATA\n    }\n  }\n\n\n  //FUNCTION TO SET DEFAULT PETITION STRING IF . IS PRESSES OR IF ANSWER MODE IS ON\n  setDefaultPetition = () => {\n    const { petition, count, PETITION } = this.state;\n    \n    //ADD CHAR FROM THE RIGHT POSITION TO PETITION\n    let val = petition + PETITION[count];\n    if (val !== undefined) {\n      this.setState({\n        petition: val,\n        count: count + 1\n      })\n    }\n  }\n\n  //FUNCTION TO CLEAR DATA OF PAGE\n  clearData = () => {\n    this.setState({\n      petition: \"\",\n      ansMode: false,\n      count: 0,\n      answer: \"\",\n      displayAnswer: false,\n      loader: false,\n      question: \"\"\n    })\n  }\n\n  //FUNCTION TO SHOW ANSWER\n  showAnswer = async () => {\n    const { answer } = this.state;\n    console.log({answer});\n    const GYAN = [//RANDOM STRINGS TO USE WHEN NO ANSWER IS PRESENT\n      \"Its time to mediate, I will answer later.\",\n      \"Looks like you are trying my knowledge, I don't trust you\",\n      \"Life is also a question my friend, somethings dont have answer!\",\n      \"I don't like your attitude while asking this question\",\n      \"Someone in the room doesn't believe me, I am not answering\",\n      \"This is not a good time to answer this question\",\n      \"Stars are not align right now, please try later!\",\n      \"Devil is coming, I will answer you later\",\n      \"Don't try to test me, I will burn you to death\",\n      \"You are a good question but your question hurts me\",\n      \"Too many questions, I m tired now\",\n      \"You are asking too many question, Please give me some rest\",\n      \"I don't want to answer this question\",\n      \"I think there is glitch in the matrix\",\n    ];\n    //START LOADER\n    this.setState({\n      loader: true\n    });\n    if (answer.length){//IF ANSWER IS PRESENT\n      await this.timeout(this.getRndInteger(3000, 5000)); //ADD RANDOM DELAY OF 3 TO 5 SEC FOR LOADER\n      this.setState({\n        displayAnswer: true,\n        loader: false\n      })\n    }\n    else{//IF ANSWER IS NOT PRESENT\n      await this.timeout(7000); //ADD DELAY OF 7 SEC FOR LOADER\n      let index = this.getRndmAnswerIndex(GYAN.length);//GET THE ANSWERS INDEX TO SHOW\n      let answer = GYAN[index];\n      this.setState({\n        answer,\n        displayAnswer: true,\n        loader: false,\n        lastAnswer: index\n      })\n    }\n  }\n\n\n  //FUNCTION TO GET THE INDEX ON RANDOM ANSWER\n  getRndmAnswerIndex = (gyanLength) =>{\n    const {lastAnswer} = this.state;\n    let index = this.getRndInteger(0, gyanLength - 1);\n    if (index === lastAnswer ){\n      if (index === gyanLength - 1){\n      return index--;\n      }\n      else{\n      return index++;\n      }\n    }\n    else{\n      return index;\n    }\n  }\n\n  //FUNCTION TO ADD DELAY\n  timeout = (delay) => {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  //FUNCTION TO GET RANDOM INTEGER\n  getRndInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  //FUNCTION TO HANDLE CHANGE IN QUESTION\n  handleChangeQuestion(event) {\n    this.setState({\n      question: event.target.value,\n      showAnswer: false\n    })\n  }\n\ntoggleModal = () => {\n  this.setState({\n    modalIsOpen : ! this.state.modalIsOpen\n  })\n}\n\n  render() {\n    const { petition, question, answer, displayAnswer, loader, modalIsOpen } = this.state;\n\n    const customStyles = {\n      content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n        width: '80%',\n        background: 'black',\n        color: 'white',\n        height: '100%'\n      }\n    };\n\n    const howToUse = (\n      <Modal\n        isOpen={modalIsOpen}\n        style={customStyles}\n        onRequestClose={() => this.toggleModal()}\n        contentLabel=\"Example Modal\"\n      >\n        <center>\n          <img className=\"logo\" src=\"logoMain.jpeg\"></img>\n          <h1 style={{ color: 'red' }}>Sarvagyani</h1>\n          <h3 style={{ color: 'red'}}>How to use?</h3>\n        <br /><br />\n          <h4 style={{ color: 'white' }}>\n          The formula to enter the request is by writing:\n          \"Sarvagyani please tell\". Press 'Tab' to go to the question textbox.\n          Please keep a friendly and positive language. When your question is ready, press 'Tab' & 'Enter'.\n          Wait for a while and you will see the answer.</h4>\n          </center>\n          <ul>\n          <li>You can't use mouse controls. Use <strong>'tab'</strong> to navigate.</li>\n            <li>You can't use Sarvagyani on mobile. Use a laptop only.</li>\n          </ul>\n          <center>\n          <h3 onKeyPress={() => this.toggleModal()} tabindex=\"1\" style={{ color: 'green', textDecoration: 'underline' }}>Let's Play</h3>\n          </center>\n      </Modal>\n    );\n    \n    return (\n      <div className=\"underlay-photo\">\n        {howToUse}\n        <center>\n        <img  className=\"logo\" src=\"logoMain.jpeg\"></img>\n        <h1 style={{color: 'red'}}>Sarvagyani</h1>\n          </center>\n        <form className=\"login-form\">\n          <input type=\"text\" className=\"petition\" tabindex=\"1\" autoFocus={true} onChange={(e) => this.handleChange(e)} value={petition} placeholder=\"Request\" />\n          <input type=\"text\" className=\"question\" tabindex=\"2\" onChange={(e) => this.handleChangeQuestion(e)} value={question} placeholder=\"Ask Question\" />\n        </form>\n        <input type=\"button\" name=\"submit\" value=\"Answer\" tabindex=\"3\" onClick={() => this.showAnswer()} className=\"showAnswer\" disabled={!petition || !question || displayAnswer} />\n        <div className=\"footer-title\">Sarvagyani Â© 2021<br /><a tabindex=\"4\" onKeyPress={() => this.toggleModal()} className=\"howToUse\">How to use?</a></div>\n        {\n          loader ?\n            <center>\n              <div className=\"loader\">Searching...</div>\n            </center>\n            : <></>\n        }\n\n        {\n          displayAnswer ?\n            <center>\n              <p className=\"heading\">{answer}</p>\n            </center>\n            : <></>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/vvdn/Downloads/prateek/sarvagyani/src/reportWebVitals.js",[],["19","20"],"/Users/vvdn/Downloads/prateek/sarvagyani/src/index.js",[],{"ruleId":"21","severity":1,"message":"22","line":195,"column":11,"nodeType":"23","endLine":195,"endColumn":53},{"ruleId":"21","severity":1,"message":"22","line":219,"column":9,"nodeType":"23","endLine":219,"endColumn":52},{"ruleId":"24","severity":1,"message":"25","line":227,"column":62,"nodeType":"23","endLine":227,"endColumn":137},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-native-reassign",["30"],"no-negated-in-lhs",["31"],"no-global-assign","no-unsafe-negation"]